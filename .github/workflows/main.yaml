name: Nightly build

env:
  RUST_BACKTRACE: 1

on:
  schedule:
    - cron: '59 23 * * *'
  workflow_dispatch:

jobs:
  setup:
    name: Set up
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.setup.outputs.VERSION }}
      DOING_RELEASE: ${{ steps.setup.outputs.DOING_RELEASE }}
    steps:
      - name: Set up env vars
        id: setup
        shell: bash
        run: |
          DOING_RELEASE=1
          VERSION="wasmer-nightly-$(date +'%Y-%m-%d')"
          echo ::set-output name=VERSION::${VERSION}
          echo ::set-output name=DOING_RELEASE::${DOING_RELEASE}
          echo $VERSION
          echo $DOING_RELEASE
      - name: Double checking
        run: |
          echo ${{ steps.setup.outputs.VERSION }}
          echo ${{ steps.setup.outputs.DOING_RELEASE }}
  build:
    name: Build on ${{ matrix.build }}
    runs-on: ${{ matrix.os }}
    needs: setup
    if: needs.setup.outputs.DOING_RELEASE == '1'
    strategy:
      fail-fast: false
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-latest
            rust: 1.45.2
          - build: macos
            os: macos-latest
            rust: 1.45.2
          - build: windows
            os: windows-latest
            rust: 1.45.2
    env:
      CARGO_SCCACHE_VERSION: 0.2.13
      SCCACHE_AZURE_BLOB_CONTAINER: wasmerstoragesccacheblob
      SCCACHE_AZURE_CONNECTION_STRING: ${{ secrets.SCCACHE_AZURE_CONNECTION_STRING }}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'wasmerio/wasmer'
          ref: 'master'
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Configure cargo data directory
        # After this point, all cargo registry and crate data is stored in
        # $GITHUB_WORKSPACE/.cargo_home. This allows us to cache only the files
        # that are needed during the build process. Additionally, this works
        # around a bug in the 'cache' action that causes directories outside of
        # the workspace dir to be saved/restored incorrectly.
        run: echo "::set-env name=CARGO_HOME::$(pwd)/.cargo_home"
      - name: Cache
        uses: actions/cache@master
        with:
          # Note: crates from the git repo always get rebuilt
          # so we cache only those subdirectories of target/{debug|release} that
          # contain the build output for crates that come from the registry.
          path: |-
            .cargo_home
            target/*/.*
            target/*/build
            target/*/deps
          key: ${{ matrix.os }}-${{ matrix.rust }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.rust }}-
      # # Install sccache
      # - uses: actions/cache@master
      #   with:
      #     path: ${{ runner.tool_cache }}/cargo-sccache
      #     key: cargo-sccache-bin-${{ env.CARGO_SCCACHE_VERSION }}
      # - name: Install sccache
      #   run: |
      #     echo "::add-path::${{ runner.tool_cache }}/cargo-sccache/bin"
      #     cargo install sccache --version ${{ env.CARGO_SCCACHE_VERSION }} --root ${{ runner.tool_cache }}/cargo-sccache
      # - name: Start sccache
      #   run: |
      #     ${{ runner.tool_cache }}/cargo-sccache/bin/sccache --start-server
      #     ${{ runner.tool_cache }}/cargo-sccache/bin/sscache -s
      #     echo "::set-env name=RUSTC_WRAPPER::${{ runner.tool_cache }}/cargo-sccache/bin/sccache"
      - name: Install LLVM (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install llvm
        # run: |
        #   curl --proto '=https' --tlsv1.2 -sSf https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/LLVM-10.0.0-win64.exe -L -o llvm-installer.exe
        #   7z x llvm-installer.exe -oC:/llvm-10
        #   echo ::add-path::C:/llvm-10/bin
        #   echo ::set-env name=LLVM_SYS_100_PREFIX::C:/llvm-10
        #   echo ::set-env name=LIBCLANG_PATH::C:/llvm-10/bin/libclang.dll
      - name: Install LLVM (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang+llvm-10.0.0-x86_64-apple-darwin.tar.xz -L -o llvm.tar.xz
          mkdir -p ${{ env.LLVM_DIR }}
          tar xf llvm.tar.xz --strip-components=1 -C ${{ env.LLVM_DIR }}
          echo "::add-path::${{ env.LLVM_DIR }}/bin"
          echo "::set-env name=LLVM_SYS_100_PREFIX::${{ env.LLVM_DIR }}"
        env:
          LLVM_DIR: ${{ github.workspace }}/llvm-10
      - name: Install LLVM (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang+llvm-10.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz -L -o llvm.tar.xz
          mkdir -p /opt/llvm-10
          tar xf llvm.tar.xz --strip-components=1 -C /opt/llvm-10
          echo ::add-path::/opt/llvm-10/bin
          echo ::set-env name=LLVM_SYS_100_PREFIX::/opt/llvm-10
      - name: Set up dependencies for Mac OS
        run: brew install automake
        if: matrix.os == 'macos-latest'
      - name: Build C API
        run: |
          make build-capi
        if: matrix.os != 'windows-latest'
      - name: Build C API on Windows
        run: make build-capi
        if: matrix.os == 'windows-latest'
      - name: Build Wasmer binary
        run: |
          make build-wasmer
      - name: Build Wapm binary
        run: |
          make build-wapm
      - name: Package Wasmer
        run: |
          make package
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: wasmer-${{ matrix.os }}
          path: dist

  release:
    needs: [setup, build]
    runs-on: ubuntu-latest
    if: needs.setup.outputs.DOING_RELEASE == '1'
    steps:
      - name: Download The Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.setup.outputs.VERSION }}
          release_name: Release ${{ steps.setup.output.VERSION }}
          draft: true # leaving this as a draft while this workflow is being developed
          prerelease: false
      - name: Upload Release Asset Windows
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: artifacts/wasmer-windows-latest/wasmer-windows.exe
          asset_name: wasmer-windows.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload Release Asset Linux
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/wasmer-ubuntu-latest/wasmer-linux-amd64.tar.gz
          asset_name: wasmer-linux-amd64.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Asset Mac
        id: upload-release-asset-mac
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/wasmer-macos-latest/wasmer-darwin-amd64.tar.gz
          asset_name: wasmer-darwin-amd64.tar.gz
          asset_content_type: application/gzip
