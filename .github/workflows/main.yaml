name: Nightly build

env:
  RUST_BACKTRACE: 1

on:
  schedule:
    - cron: '59 23 * * *'
  workflow_dispatch:

jobs:
  setup:
    name: Set up
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.setup.outputs.VERSION }}
      DOING_RELEASE: ${{ steps.setup.outputs.DOING_RELEASE }}
    steps:
      - name: Set up env vars
        id: setup
        shell: bash
        run: |
          DOING_RELEASE=1
          VERSION="wasmer-nightly-$(date +'%Y-%m-%d' -d 'yesterday')"
          echo ::set-output name=VERSION::${VERSION}
          echo ::set-output name=DOING_RELEASE::${DOING_RELEASE}
          echo $VERSION
          echo $DOING_RELEASE
      - name: Double checking
        run: |
          echo ${{ steps.setup.outputs.VERSION }}
          echo ${{ steps.setup.outputs.DOING_RELEASE }}
  build:
    name: Build on ${{ matrix.build }}
    runs-on: ${{ matrix.os }}
    needs: setup
    if: needs.setup.outputs.DOING_RELEASE == '1'
    strategy:
      fail-fast: false
      matrix:
        build: [linux, macos, windows, linux-aarch64]
        include:
          - build: linux
            os: ubuntu-latest
            rust: 1.46.0
            llvm_url: 'https://github.com/wasmerio/llvm-build/releases/download/10.x/Ubuntu1910_Release.tar.xz'
            # llvm_url: 'https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang+llvm-10.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz'
            artifact_name: 'wasmer-linux-amd64'
          - build: macos
            os: macos-latest
            rust: 1.46.0
            llvm_url: 'https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang+llvm-10.0.0-x86_64-apple-darwin.tar.xz'
            artifact_name: 'wasmer-macos-amd64'
          - build: windows
            os: windows-latest
            rust: 1.46.0
            artifact_name: 'wasmer-windows-amd64'
          - build: linux-aarch64
            os: [self-hosted, Linux, ARM64]
            rust: 1.46.0
            llvm_url: 'https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang+llvm-10.0.0-aarch64-linux-gnu.tar.xz'
            artifact_name: 'wasmer-linux-aarch64'
    env:
      CARGO_SCCACHE_VERSION: 0.2.13
      SCCACHE_AZURE_BLOB_CONTAINER: wasmerstoragesccacheblob
      SCCACHE_AZURE_CONNECTION_STRING: ${{ secrets.SCCACHE_AZURE_CONNECTION_STRING }}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'wasmerio/wasmer'
          ref: 'master'
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Configure cargo data directory
        # After this point, all cargo registry and crate data is stored in
        # $GITHUB_WORKSPACE/.cargo_home. This allows us to cache only the files
        # that are needed during the build process. Additionally, this works
        # around a bug in the 'cache' action that causes directories outside of
        # the workspace dir to be saved/restored incorrectly.
        run: echo "CARGO_HOME=$(pwd)/.cargo_home" >> $GITHUB_ENV
      - name: Cache
        uses: actions/cache@master
        with:
          # Note: crates from the git repo always get rebuilt
          # so we cache only those subdirectories of target/{debug|release} that
          # contain the build output for crates that come from the registry.
          path: |-
            .cargo_home
            target/*/.*
            target/*/build
            target/*/deps
          key: ${{ matrix.os }}-${{ matrix.rust }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.rust }}-
      # # Install sccache
      # - uses: actions/cache@master
      #   with:
      #     path: ${{ runner.tool_cache }}/cargo-sccache
      #     key: cargo-sccache-bin-${{ env.CARGO_SCCACHE_VERSION }}
      # - name: Install sccache
      #   run: |
      #     echo "${{ runner.tool_cache }}/cargo-sccache/bin" >> $GITHUB_PATH
      #     cargo install sccache --version ${{ env.CARGO_SCCACHE_VERSION }} --root ${{ runner.tool_cache }}/cargo-sccache
      # - name: Start sccache
      #   run: |
      #     ${{ runner.tool_cache }}/cargo-sccache/bin/sccache --start-server
      #     ${{ runner.tool_cache }}/cargo-sccache/bin/sscache -s
      #     echo "RUSTC_WRAPPER=${{ runner.tool_cache }}/cargo-sccache/bin/sccache" >> $GITHUB_ENV
      - name: Install LLVM (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install llvm
        # run: |
        #   curl --proto '=https' --tlsv1.2 -sSf https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/LLVM-10.0.0-win64.exe -L -o llvm-installer.exe
        #   7z x llvm-installer.exe -oC:/llvm-10
        #   echo C:/llvm-10/bin >> $GITHUB_PATH
        #   echo "LLVM_SYS_100_PREFIX=C:/llvm-10" >> $GITHUB_ENV
        #   echo "LIBCLANG_PATH=C:/llvm-10/bin/libclang.dll" >> $GITHUB_ENV
      - name: Install LLVM (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          curl --proto '=https' --tlsv1.2 -sSf ${{ matrix.llvm_url }} -L -o llvm.tar.xz
          mkdir -p ${{ env.LLVM_DIR }}
          tar xf llvm.tar.xz --strip-components=1 -C ${{ env.LLVM_DIR }}
          echo "${{ env.LLVM_DIR }}/bin" >> $GITHUB_PATH
          echo "LLVM_SYS_100_PREFIX=${{ env.LLVM_DIR }}" >> $GITHUB_ENV
        env:
          LLVM_DIR: ${{ github.workspace }}/llvm-10
      - name: Set up dependencies for Mac OS
        run: brew install automake
        if: matrix.os == 'macos-latest'
      - name: Build C API
        run: make build-capi
      - name: Build Wasmer binary
        run: make build-wasmer
      - name: Build Wapm binary
        run: make build-wapm
      - name: Package Wasmer
        run: make package
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.artifact_name }}
          path: dist
      - name: Post to Slack on failure
        if: ${{ failure() }}
        run: |
          ACTIONS_URL=$(printf "https://github.com/%s/actions/runs/%s" $GITHUB_REPOSITORY $GITHUB_RUN_ID)
          MESSAGE_TEXT=$(printf '{"text":":fire: Build failed :fire:. %s"}' $ACTIONS_URL)
          curl -X POST -H 'Content-type: application/json' --data "$MESSAGE_TEXT" ${{ secrets.SLACK_WEBHOOK_URL }}

  release:
    needs: [setup, build]
    runs-on: ubuntu-latest
    if: needs.setup.outputs.DOING_RELEASE == '1'
    steps:
      - name: Download The Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.setup.outputs.VERSION }}
          release_name: Release ${{ needs.setup.outputs.VERSION }}
          draft: false
          prerelease: false
      - name: Upload Release Asset Windows
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: artifacts/wasmer-windows-amd64/wasmer-windows.exe
          asset_name: wasmer-windows.exe
          asset_content_type: application/vnd.microsoft.portable-executable
      - name: Upload Release Asset Linux amd64
        id: upload-release-asset-linux-amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/wasmer-linux-amd64/wasmer-linux-amd64.tar.gz
          asset_name: wasmer-linux-amd64.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Asset Mac
        id: upload-release-asset-mac
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/wasmer-macos-amd64/wasmer-darwin-amd64.tar.gz
          asset_name: wasmer-darwin-amd64.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Asset Linux aarch64
        id: upload-release-asset-linux-aarch64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/wasmer-linux-aarch64/wasmer-linux-aarch64.tar.gz
          asset_name: wasmer-linux-aarch64.tar.gz
          asset_content_type: application/gzip
      - name: Post to Slack on failure
        if: ${{ failure() }}
        run: |
          ACTIONS_URL=$(printf "https://github.com/%s/actions/runs/%s" $GITHUB_REPOSITORY $GITHUB_RUN_ID)
          MESSAGE_TEXT=$(printf '{"text":":fire: Publishing release failed :fire:. %s"}' $ACTIONS_URL)
          curl -X POST -H 'Content-type: application/json' --data "$MESSAGE_TEXT" ${{ secrets.SLACK_WEBHOOK_URL }}
